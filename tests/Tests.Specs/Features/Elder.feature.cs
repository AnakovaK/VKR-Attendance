// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ElderFeature : object, Xunit.IClassFixture<ElderFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Elder.feature"
#line hidden
        
        public ElderFeature(ElderFeature.FixtureData fixtureData, Tests_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Elder", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
    testRunner.Given("a global semester named Semester", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get available visiting logs")]
        [Xunit.TraitAttribute("FeatureTitle", "Elder")]
        [Xunit.TraitAttribute("Description", "Get available visiting logs")]
        public void GetAvailableVisitingLogs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get available visiting logs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "visiting log title",
                            "student id",
                            "status"});
                table1.AddRow(new string[] {
                            "vl1",
                            "usr1",
                            "elder"});
#line 8
    testRunner.Given("exists visiting log with students", ((string)(null)), table1, "Given ");
#line hidden
#line 11
    testRunner.Given("the student usr1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
    testRunner.When("receive available visiting logs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
    testRunner.Then("received visiting log vl1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get visiting log composition")]
        [Xunit.TraitAttribute("FeatureTitle", "Elder")]
        [Xunit.TraitAttribute("Description", "Get visiting log composition")]
        public void GetVisitingLogComposition()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get visiting log composition", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "visiting log title",
                            "student id",
                            "status"});
                table2.AddRow(new string[] {
                            "vl2",
                            "st2",
                            "elder"});
                table2.AddRow(new string[] {
                            "vl2",
                            "st3",
                            "student"});
                table2.AddRow(new string[] {
                            "vl2",
                            "st4",
                            "student"});
                table2.AddRow(new string[] {
                            "vl2",
                            "st5",
                            "student"});
                table2.AddRow(new string[] {
                            "vl3",
                            "st6",
                            "student"});
                table2.AddRow(new string[] {
                            "vl3",
                            "st7",
                            "elder"});
#line 16
    testRunner.Given("exists visiting log with students", ((string)(null)), table2, "Given ");
#line hidden
#line 24
    testRunner.Given("the student st6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
    testRunner.When("receive composition from vl3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "student id"});
                table3.AddRow(new string[] {
                            "st7"});
                table3.AddRow(new string[] {
                            "st6"});
#line 26
    testRunner.Then("received composition contains", ((string)(null)), table3, "Then ");
#line hidden
#line 30
    testRunner.Given("the student st2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
    testRunner.When("receive composition from vl2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "student id"});
                table4.AddRow(new string[] {
                            "st3"});
                table4.AddRow(new string[] {
                            "st2"});
                table4.AddRow(new string[] {
                            "st4"});
                table4.AddRow(new string[] {
                            "st5"});
#line 32
    testRunner.Then("received composition contains", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create lesson from elder")]
        [Xunit.TraitAttribute("FeatureTitle", "Elder")]
        [Xunit.TraitAttribute("Description", "Create lesson from elder")]
        public void CreateLessonFromElder()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create lesson from elder", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "visiting log title",
                            "student id",
                            "status"});
                table5.AddRow(new string[] {
                            "vl4",
                            "st8",
                            "elder"});
#line 40
    testRunner.Given("exists visiting log with students", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "visiting log title",
                            "discipline"});
                table6.AddRow(new string[] {
                            "vl4",
                            "dis1"});
#line 43
    testRunner.Given("exists visiting log with disciplines", ((string)(null)), table6, "Given ");
#line hidden
#line 46
    testRunner.Given("timeslot n1 from 120 to 150", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson type id",
                            "lesson type name"});
                table7.AddRow(new string[] {
                            "lest1",
                            "pr"});
#line 47
    testRunner.Given("exists lesson types with statuses", ((string)(null)), table7, "Given ");
#line hidden
#line 50
    testRunner.Given("the student st8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
    testRunner.When("creating lesson in vl4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
    testRunner.Then("lesson created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get lessons for day is correct")]
        [Xunit.TraitAttribute("FeatureTitle", "Elder")]
        [Xunit.TraitAttribute("Description", "Get lessons for day is correct")]
        public void GetLessonsForDayIsCorrect()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get lessons for day is correct", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "visiting log title",
                            "student id",
                            "status"});
                table8.AddRow(new string[] {
                            "vl5",
                            "st9",
                            "student"});
#line 55
    testRunner.Given("exists visiting log with students", ((string)(null)), table8, "Given ");
#line hidden
#line 58
    testRunner.Given("exists lesson ls1 about math at 2023-08-26 from 18:00 to 19:30 of type practic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
    testRunner.Given("exists lesson ls2 about math at 2023-08-26 from 10:40 to 12:10 of type practic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
    testRunner.Given("exists lesson ls3 about phys at 2023-08-25 from 09:00 to 10:40 of type practic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
    testRunner.Given("exists lesson ls4 about math at 2023-08-25 from 12:40 to 14:10 of type practic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
    testRunner.Given("exists lesson ls5 about math at 2023-08-24 from 14:20 to 15:50 of type practic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
                table9.AddRow(new string[] {
                            "ls1"});
                table9.AddRow(new string[] {
                            "ls2"});
                table9.AddRow(new string[] {
                            "ls3"});
                table9.AddRow(new string[] {
                            "ls4"});
                table9.AddRow(new string[] {
                            "ls5"});
#line 63
    testRunner.And("log vl5 contains lessons", ((string)(null)), table9, "And ");
#line hidden
#line 70
    testRunner.Given("the student st9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
    testRunner.When("receive lessons in vl5 for 2023-08-26", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
                table10.AddRow(new string[] {
                            "ls2"});
                table10.AddRow(new string[] {
                            "ls1"});
#line 72
    testRunner.Then("lessons received is", ((string)(null)), table10, "Then ");
#line hidden
#line 76
    testRunner.When("receive lessons in vl5 for 2023-08-25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
                table11.AddRow(new string[] {
                            "ls3"});
                table11.AddRow(new string[] {
                            "ls4"});
#line 77
    testRunner.Then("lessons received is", ((string)(null)), table11, "Then ");
#line hidden
#line 81
    testRunner.When("receive lessons in vl5 for 2023-08-24", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
                table12.AddRow(new string[] {
                            "ls5"});
#line 82
    testRunner.Then("lessons received is", ((string)(null)), table12, "Then ");
#line hidden
#line 85
    testRunner.When("receive lessons in vl5 for 2023-08-27", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
#line 86
    testRunner.Then("lessons received is", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get lesson from several logs for teacher")]
        [Xunit.TraitAttribute("FeatureTitle", "Elder")]
        [Xunit.TraitAttribute("Description", "Get lesson from several logs for teacher")]
        public void GetLessonFromSeveralLogsForTeacher()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get lesson from several logs for teacher", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 92
    testRunner.Given("exists lesson teacher_ls1 about teacher_math at 2023-08-28 from 18:00 to 19:30 of" +
                        " type teacher_practic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
    testRunner.Given("exists lesson teacher_ls2 about teacher_math at 2023-08-28 from 10:40 to 12:10 of" +
                        " type teacher_practic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
                table14.AddRow(new string[] {
                            "teacher_ls1"});
                table14.AddRow(new string[] {
                            "teacher_ls2"});
#line 94
    testRunner.And("teacher 123 leading to", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
                table15.AddRow(new string[] {
                            "teacher_ls1"});
#line 98
    testRunner.And("log teacher_vl1 contains lessons", ((string)(null)), table15, "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
                table16.AddRow(new string[] {
                            "teacher_ls2"});
#line 101
    testRunner.And("log teacher_vl2 contains lessons", ((string)(null)), table16, "And ");
#line hidden
#line 104
    testRunner.Given("the teacher 123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
    testRunner.When("receive teacher lessons for 2023-08-28", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "lesson"});
                table17.AddRow(new string[] {
                            "teacher_ls2"});
                table17.AddRow(new string[] {
                            "teacher_ls1"});
#line 106
    testRunner.Then("teacher lessons received is", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ElderFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ElderFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
